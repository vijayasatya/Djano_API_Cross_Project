{
  "userkey1": {
    "frontendhtmlcode": "\n<!DOCTYPE html>\n<html lang=\"en\">\n{% load static %}\n<head>\n\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"{% static 'script.js' %}\" type=\"text/javascript\"></script>\n</head>\n<body>\n    <h1>This is main sevrer running </h1>\n    {{ msg }}\n\n</body>\n\n</html>",
    "frontendcsscode": "body,html {\n      margin: 0;\n      padding:0;\n    }\n    canvas {\n      background: black;\n      width: 100vw;\n      position: fixed;\n      filter:brightness(100%);\n    }",
    "frontendjscode": "window.onload = function() {\n      var c = document.createElement(\"canvas\");\n      document.body.appendChild(c)\n      var ctx = c.getContext(\"2d\");\n      c.width = window.innerWidth;\n      c.height = window.innerHeight;\n      let clr = 250;\n      let clr1 = 10\n      let then = 0;\n      setTimeout(() =>{\n          alert(\"\\n\\nDrag over the screen to break the lines !!!\\n\")\n      },1500)\n      var Setup = function(x, y, color) {\n        this.x = rn(c.width, 0);\n        this.y = rn(c.height, 0);\n        this.r = 5;\n        this.xv = rn(90, -90);\n        this.yv = rn(90, -90);\n        this.color = \"hsl(\" +clr+ \",100%,50%)\"\n      }\n      Setup.prototype.update = function(td) {\n        if (this.x + this.r > c.width || this.x - this.r < 0) {\n          this.xv = -this.xv;\n\n        }\n        if (this.y + this.r > c.height || this.y - this.r < 0) {\n          this.yv = -this.yv\n\n        }\n        let dxx = mouse.xp - this.x;\n        let dyy = mouse.yp - this.y;\n        let dd = Math.sqrt(dxx*dxx+dyy*dyy)\n        if (dd < mouse.radius + this.r) {\n          if (mouse.xp < this.x && this.x < c.width - this.r * 10) {\n            this.x += 10\n          }\n          if (mouse.yp < this.y && this.y < c.height - this.r * 10) {\n            this.y += 10\n          }\n          if (mouse.xp > this.x && this.x > this.r * 10) {\n            this.x -= 10\n          }\n          if (mouse.yp > this.y && this.y > this.r * 10) {\n            this.y -= 10\n          }\n        }\n        this.x += this.xv * td;\n        this.y += this.yv * td;\n        this.color = \"hsl(\" +clr+ \",100%,50%)\"\n      }\n      Setup.prototype.draw = function(){\n        ctx.beginPath();\n        ctx.fillStyle = this.color\n        ctx.arc(this.x, this.y, this.r, 0, 2*Math.PI)\n        ctx.fill()\n      }\n      const rn = (max,min) => Math.random()*(max-min)+min;\n      const mouse = {\n        xp: NaN,\n        yp: NaN,\n        radius: 90\n      }\n      c.addEventListener(\"touchstart\",  e => {\n        mouse.xp = e.touches[0].clientX\n        mouse.yp = e.touches[0].clientY\n      })\n      c.addEventListener(\"touchmove\", e => {\n        mouse.xp = e.touches[0].clientX\n        mouse.yp = e.touches[0].clientY\n      })\n      c.addEventListener(\"touchend\", () => {\n        mouse.xp = NaN\n        mouse.yp = NaN\n      })\n      let obj = []\n      const fillar = () => {\n        for (let i = 0; i < 65; i++) {\n        clr++\n          obj.push(new Setup(clr))\n        }\n      }\nlet now = performance.now()/1000;\nlet dt = now - then;\nthen = now;\n      const animate = () => {\n        ctx.globalAlfa = 0.1\n        ctx.fillStyle = \"black\"\n        ctx.fillRect(0, 0, c.width, c.height)\n        ctx.fill()\n        clr+=2\n        window.requestAnimationFrame(animate)\n        for (let ii = 0; ii < obj.length; ii++) {\n          obj[ii].draw()\n          obj[ii].update(dt)\n          for (let k = ii; k < obj.length; k++) {\n            let dx = obj[k].x-obj[ii].x\n            let dy = obj[k].y-obj[ii].y\n            let ds = Math.sqrt(dx*dx+dy*dy)\n            if (ds > (c.width/14)+(c.height/14)) {\n              ctx.beginPath()\n              ctx.strokeStyle = \"hsla(\" +clr1+ \",100%,50%,0)\"\n              ctx.moveTo(obj[k].x, obj[k].y)\n              ctx.lineTo(obj[ii].x, obj[ii].y)\n              ctx.stroke()\n            } else {\n              ctx.beginPath()\n              ctx.strokeStyle = \"hsla(\" +clr+ \",100%,50%,0.8)\"\n              ctx.moveTo(obj[k].x, obj[k].y)\n              ctx.lineTo(obj[ii].x, obj[ii].y)\n              ctx.stroke()\n            }\n          }\n        }\n      }\n      animate()\n      fillar()\n    }",
    "backendcode": "from django.shortcuts import render\n\n\n# Create your views here.\ndef cross(request,name):\n    #Write your code here dont change function name, and try except block happy coding\n\n\n    msg = \"hI LOVE TO CODE THIS\"\n    my_dic = {'msg' :msg}\n    path = '{}/cross.html'.format(name)\n    return render(request,path,context=my_dic)"
  },
  "userkey2": {
    "frontendhtmlcode": "\n<!DOCTYPE html>\n<html lang=\"en\">\n{% load static %}\n<head>\n\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"{% static 'script.js' %}\" type=\"text/javascript\"></script>\n</head>\n<body>\n    <h1>This is main sevrer running </h1>\n    {{ msg }}\n\n</body>\n\n</html>",
    "frontendcsscode": "body,html {\n      margin: 0;\n      padding:0;\n    }\n    canvas {\n      background: black;\n      width: 100vw;\n      position: fixed;\n      filter:brightness(100%);\n    }",
    "frontendjscode": "window.onload = function() {\n      var c = document.createElement(\"canvas\");\n      document.body.appendChild(c)\n      var ctx = c.getContext(\"2d\");\n      c.width = window.innerWidth;\n      c.height = window.innerHeight;\n      let clr = 250;\n      let clr1 = 10\n      let then = 0;\n      setTimeout(() =>{\n          alert(\"\\n\\nDrag over the screen to break the lines !!!\\n\")\n      },1500)\n      var Setup = function(x, y, color) {\n        this.x = rn(c.width, 0);\n        this.y = rn(c.height, 0);\n        this.r = 5;\n        this.xv = rn(90, -90);\n        this.yv = rn(90, -90);\n        this.color = \"hsl(\" +clr+ \",100%,50%)\"\n      }\n      Setup.prototype.update = function(td) {\n        if (this.x + this.r > c.width || this.x - this.r < 0) {\n          this.xv = -this.xv;\n\n        }\n        if (this.y + this.r > c.height || this.y - this.r < 0) {\n          this.yv = -this.yv\n\n        }\n        let dxx = mouse.xp - this.x;\n        let dyy = mouse.yp - this.y;\n        let dd = Math.sqrt(dxx*dxx+dyy*dyy)\n        if (dd < mouse.radius + this.r) {\n          if (mouse.xp < this.x && this.x < c.width - this.r * 10) {\n            this.x += 10\n          }\n          if (mouse.yp < this.y && this.y < c.height - this.r * 10) {\n            this.y += 10\n          }\n          if (mouse.xp > this.x && this.x > this.r * 10) {\n            this.x -= 10\n          }\n          if (mouse.yp > this.y && this.y > this.r * 10) {\n            this.y -= 10\n          }\n        }\n        this.x += this.xv * td;\n        this.y += this.yv * td;\n        this.color = \"hsl(\" +clr+ \",100%,50%)\"\n      }\n      Setup.prototype.draw = function(){\n        ctx.beginPath();\n        ctx.fillStyle = this.color\n        ctx.arc(this.x, this.y, this.r, 0, 2*Math.PI)\n        ctx.fill()\n      }\n      const rn = (max,min) => Math.random()*(max-min)+min;\n      const mouse = {\n        xp: NaN,\n        yp: NaN,\n        radius: 90\n      }\n      c.addEventListener(\"touchstart\",  e => {\n        mouse.xp = e.touches[0].clientX\n        mouse.yp = e.touches[0].clientY\n      })\n      c.addEventListener(\"touchmove\", e => {\n        mouse.xp = e.touches[0].clientX\n        mouse.yp = e.touches[0].clientY\n      })\n      c.addEventListener(\"touchend\", () => {\n        mouse.xp = NaN\n        mouse.yp = NaN\n      })\n      let obj = []\n      const fillar = () => {\n        for (let i = 0; i < 65; i++) {\n        clr++\n          obj.push(new Setup(clr))\n        }\n      }\nlet now = performance.now()/1000;\nlet dt = now - then;\nthen = now;\n      const animate = () => {\n        ctx.globalAlfa = 0.1\n        ctx.fillStyle = \"black\"\n        ctx.fillRect(0, 0, c.width, c.height)\n        ctx.fill()\n        clr+=2\n        window.requestAnimationFrame(animate)\n        for (let ii = 0; ii < obj.length; ii++) {\n          obj[ii].draw()\n          obj[ii].update(dt)\n          for (let k = ii; k < obj.length; k++) {\n            let dx = obj[k].x-obj[ii].x\n            let dy = obj[k].y-obj[ii].y\n            let ds = Math.sqrt(dx*dx+dy*dy)\n            if (ds > (c.width/14)+(c.height/14)) {\n              ctx.beginPath()\n              ctx.strokeStyle = \"hsla(\" +clr1+ \",100%,50%,0)\"\n              ctx.moveTo(obj[k].x, obj[k].y)\n              ctx.lineTo(obj[ii].x, obj[ii].y)\n              ctx.stroke()\n            } else {\n              ctx.beginPath()\n              ctx.strokeStyle = \"hsla(\" +clr+ \",100%,50%,0.8)\"\n              ctx.moveTo(obj[k].x, obj[k].y)\n              ctx.lineTo(obj[ii].x, obj[ii].y)\n              ctx.stroke()\n            }\n          }\n        }\n      }\n      animate()\n      fillar()\n    }",
    "backendcode": "from django.shortcuts import render\n\n\n# Create your views here.\ndef cross(request,name):\n    #Write your code here dont change function name, and try except block happy coding\n\n\n    msg = \"Are u good orking fine\"\n    my_dic = {'msg' :msg}\n    path = '{}/cross.html'.format(name)\n    return render(request,path,context=my_dic)"
  },
  "userkey3": {
    "frontendhtmlcode": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"{% static 'script.js' %}\" type=\"text/javascript\"></script>\n</head>\n<body>\n    <h1>This is main sevrer running </h1>\n\n</body>\n\n</html>",
    "frontendcsscode": "body,html {\n      margin: 0;\n      padding:0;\n    }\n    canvas {\n      background: black;\n      width: 100vw;\n      position: fixed;\n      filter:brightness(100%);\n    }",
    "frontendjscode": "window.onload = function() {\n      var c = document.createElement(\"canvas\");\n      document.body.appendChild(c)\n      var ctx = c.getContext(\"2d\");\n      c.width = window.innerWidth;\n      c.height = window.innerHeight;\n      let clr = 250;\n      let clr1 = 10\n      let then = 0;\n      setTimeout(() =>{\n          alert(\"\\n\\nDrag over the screen to break the lines !!!\\n\")\n      },1500)\n      var Setup = function(x, y, color) {\n        this.x = rn(c.width, 0);\n        this.y = rn(c.height, 0);\n        this.r = 5;\n        this.xv = rn(90, -90);\n        this.yv = rn(90, -90);\n        this.color = \"hsl(\" +clr+ \",100%,50%)\"\n      }\n      Setup.prototype.update = function(td) {\n        if (this.x + this.r > c.width || this.x - this.r < 0) {\n          this.xv = -this.xv;\n\n        }\n        if (this.y + this.r > c.height || this.y - this.r < 0) {\n          this.yv = -this.yv\n\n        }\n        let dxx = mouse.xp - this.x;\n        let dyy = mouse.yp - this.y;\n        let dd = Math.sqrt(dxx*dxx+dyy*dyy)\n        if (dd < mouse.radius + this.r) {\n          if (mouse.xp < this.x && this.x < c.width - this.r * 10) {\n            this.x += 10\n          }\n          if (mouse.yp < this.y && this.y < c.height - this.r * 10) {\n            this.y += 10\n          }\n          if (mouse.xp > this.x && this.x > this.r * 10) {\n            this.x -= 10\n          }\n          if (mouse.yp > this.y && this.y > this.r * 10) {\n            this.y -= 10\n          }\n        }\n        this.x += this.xv * td;\n        this.y += this.yv * td;\n        this.color = \"hsl(\" +clr+ \",100%,50%)\"\n      }\n      Setup.prototype.draw = function(){\n        ctx.beginPath();\n        ctx.fillStyle = this.color\n        ctx.arc(this.x, this.y, this.r, 0, 2*Math.PI)\n        ctx.fill()\n      }\n      const rn = (max,min) => Math.random()*(max-min)+min;\n      const mouse = {\n        xp: NaN,\n        yp: NaN,\n        radius: 90\n      }\n      c.addEventListener(\"touchstart\",  e => {\n        mouse.xp = e.touches[0].clientX\n        mouse.yp = e.touches[0].clientY\n      })\n      c.addEventListener(\"touchmove\", e => {\n        mouse.xp = e.touches[0].clientX\n        mouse.yp = e.touches[0].clientY\n      })\n      c.addEventListener(\"touchend\", () => {\n        mouse.xp = NaN\n        mouse.yp = NaN\n      })\n      let obj = []\n      const fillar = () => {\n        for (let i = 0; i < 65; i++) {\n        clr++\n          obj.push(new Setup(clr))\n        }\n      }\nlet now = performance.now()/1000;\nlet dt = now - then;\nthen = now;\n      const animate = () => {\n        ctx.globalAlfa = 0.1\n        ctx.fillStyle = \"black\"\n        ctx.fillRect(0, 0, c.width, c.height)\n        ctx.fill()\n        clr+=2\n        window.requestAnimationFrame(animate)\n        for (let ii = 0; ii < obj.length; ii++) {\n          obj[ii].draw()\n          obj[ii].update(dt)\n          for (let k = ii; k < obj.length; k++) {\n            let dx = obj[k].x-obj[ii].x\n            let dy = obj[k].y-obj[ii].y\n            let ds = Math.sqrt(dx*dx+dy*dy)\n            if (ds > (c.width/14)+(c.height/14)) {\n              ctx.beginPath()\n              ctx.strokeStyle = \"hsla(\" +clr1+ \",100%,50%,0)\"\n              ctx.moveTo(obj[k].x, obj[k].y)\n              ctx.lineTo(obj[ii].x, obj[ii].y)\n              ctx.stroke()\n            } else {\n              ctx.beginPath()\n              ctx.strokeStyle = \"hsla(\" +clr+ \",100%,50%,0.8)\"\n              ctx.moveTo(obj[k].x, obj[k].y)\n              ctx.lineTo(obj[ii].x, obj[ii].y)\n              ctx.stroke()\n            }\n          }\n        }\n      }\n      animate()\n      fillar()\n    }",
    "backendcode": "from django.shortcuts import render\n\n\n# Create your views here.\ndef cross(request,name):\n    #Write your code here dont change function name, and try except block happy coding\n\n\n    msg = \"Are u good orking fine\"\n    my_dic = {'msg' :msg}\n    path = '{}/cross.html'.format(name)\n    return render(request,path,context=my_dic)"
  },
  "userkey4": {
    "frontendhtmlcode": "\n<!DOCTYPE html>\n<html lang=\"en\">\n{% load static %}\n<head>\n\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"{% static 'script.js' %}\" type=\"text/javascript\"></script>\n</head>\n<body>\n    <h1>This is main sevrer running </h1>\n    {{ msg }}\n\n</body>\n\n</html>",
    "frontendcsscode": "body,html {\n      margin: 0;\n      padding:0;\n    }\n    canvas {\n      background: black;\n      width: 100vw;\n      position: fixed;\n      filter:brightness(100%);\n    }",
    "frontendjscode": "window.onload = function() {\n      var c = document.createElement(\"canvas\");\n      document.body.appendChild(c)\n      var ctx = c.getContext(\"2d\");\n      c.width = window.innerWidth;\n      c.height = window.innerHeight;\n      let clr = 250;\n      let clr1 = 10\n      let then = 0;\n      setTimeout(() =>{\n          alert(\"\\n\\nDrag over the screen to break the lines !!!\\n\")\n      },1500)\n      var Setup = function(x, y, color) {\n        this.x = rn(c.width, 0);\n        this.y = rn(c.height, 0);\n        this.r = 5;\n        this.xv = rn(90, -90);\n        this.yv = rn(90, -90);\n        this.color = \"hsl(\" +clr+ \",100%,50%)\"\n      }\n      Setup.prototype.update = function(td) {\n        if (this.x + this.r > c.width || this.x - this.r < 0) {\n          this.xv = -this.xv;\n\n        }\n        if (this.y + this.r > c.height || this.y - this.r < 0) {\n          this.yv = -this.yv\n\n        }\n        let dxx = mouse.xp - this.x;\n        let dyy = mouse.yp - this.y;\n        let dd = Math.sqrt(dxx*dxx+dyy*dyy)\n        if (dd < mouse.radius + this.r) {\n          if (mouse.xp < this.x && this.x < c.width - this.r * 10) {\n            this.x += 10\n          }\n          if (mouse.yp < this.y && this.y < c.height - this.r * 10) {\n            this.y += 10\n          }\n          if (mouse.xp > this.x && this.x > this.r * 10) {\n            this.x -= 10\n          }\n          if (mouse.yp > this.y && this.y > this.r * 10) {\n            this.y -= 10\n          }\n        }\n        this.x += this.xv * td;\n        this.y += this.yv * td;\n        this.color = \"hsl(\" +clr+ \",100%,50%)\"\n      }\n      Setup.prototype.draw = function(){\n        ctx.beginPath();\n        ctx.fillStyle = this.color\n        ctx.arc(this.x, this.y, this.r, 0, 2*Math.PI)\n        ctx.fill()\n      }\n      const rn = (max,min) => Math.random()*(max-min)+min;\n      const mouse = {\n        xp: NaN,\n        yp: NaN,\n        radius: 90\n      }\n      c.addEventListener(\"touchstart\",  e => {\n        mouse.xp = e.touches[0].clientX\n        mouse.yp = e.touches[0].clientY\n      })\n      c.addEventListener(\"touchmove\", e => {\n        mouse.xp = e.touches[0].clientX\n        mouse.yp = e.touches[0].clientY\n      })\n      c.addEventListener(\"touchend\", () => {\n        mouse.xp = NaN\n        mouse.yp = NaN\n      })\n      let obj = []\n      const fillar = () => {\n        for (let i = 0; i < 65; i++) {\n        clr++\n          obj.push(new Setup(clr))\n        }\n      }\nlet now = performance.now()/1000;\nlet dt = now - then;\nthen = now;\n      const animate = () => {\n        ctx.globalAlfa = 0.1\n        ctx.fillStyle = \"black\"\n        ctx.fillRect(0, 0, c.width, c.height)\n        ctx.fill()\n        clr+=2\n        window.requestAnimationFrame(animate)\n        for (let ii = 0; ii < obj.length; ii++) {\n          obj[ii].draw()\n          obj[ii].update(dt)\n          for (let k = ii; k < obj.length; k++) {\n            let dx = obj[k].x-obj[ii].x\n            let dy = obj[k].y-obj[ii].y\n            let ds = Math.sqrt(dx*dx+dy*dy)\n            if (ds > (c.width/14)+(c.height/14)) {\n              ctx.beginPath()\n              ctx.strokeStyle = \"hsla(\" +clr1+ \",100%,50%,0)\"\n              ctx.moveTo(obj[k].x, obj[k].y)\n              ctx.lineTo(obj[ii].x, obj[ii].y)\n              ctx.stroke()\n            } else {\n              ctx.beginPath()\n              ctx.strokeStyle = \"hsla(\" +clr+ \",100%,50%,0.8)\"\n              ctx.moveTo(obj[k].x, obj[k].y)\n              ctx.lineTo(obj[ii].x, obj[ii].y)\n              ctx.stroke()\n            }\n          }\n        }\n      }\n      animate()\n      fillar()\n    }",
    "backendcode": "from django.shortcuts import render\n\n\n# Create your views here.\ndef cross(request,name):\n    #Write your code here dont change function name, and try except block happy coding\n\n\n    msg = \"Are u good orking fine\"\n    my_dic = {'msg' :msg}\n    path = '{}/cross.html'.format(name)\n    return render(request,path,context=my_dic)"
  },
  "userkey5": {
    "frontendhtmlcode": "\n<!DOCTYPE html>\n<html lang=\"en\">\n{% load static %}\n<head>\n\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"{% static 'script.js' %}\" type=\"text/javascript\"></script>\n</head>\n<body>\n    <h1>This is main sevrer running </h1>\n    {{ msg }}\n\n</body>\n\n</html>",
    "frontendcsscode": "body,html {\n      margin: 0;\n      padding:0;\n    }\n    canvas {\n      background: black;\n      width: 100vw;\n      position: fixed;\n      filter:brightness(100%);\n    }",
    "frontendjscode": "window.onload = function() {\n      var c = document.createElement(\"canvas\");\n      document.body.appendChild(c)\n      var ctx = c.getContext(\"2d\");\n      c.width = window.innerWidth;\n      c.height = window.innerHeight;\n      let clr = 250;\n      let clr1 = 10\n      let then = 0;\n      setTimeout(() =>{\n          alert(\"\\n\\nDrag over the screen to break the lines !!!\\n\")\n      },1500)\n      var Setup = function(x, y, color) {\n        this.x = rn(c.width, 0);\n        this.y = rn(c.height, 0);\n        this.r = 5;\n        this.xv = rn(90, -90);\n        this.yv = rn(90, -90);\n        this.color = \"hsl(\" +clr+ \",100%,50%)\"\n      }\n      Setup.prototype.update = function(td) {\n        if (this.x + this.r > c.width || this.x - this.r < 0) {\n          this.xv = -this.xv;\n\n        }\n        if (this.y + this.r > c.height || this.y - this.r < 0) {\n          this.yv = -this.yv\n\n        }\n        let dxx = mouse.xp - this.x;\n        let dyy = mouse.yp - this.y;\n        let dd = Math.sqrt(dxx*dxx+dyy*dyy)\n        if (dd < mouse.radius + this.r) {\n          if (mouse.xp < this.x && this.x < c.width - this.r * 10) {\n            this.x += 10\n          }\n          if (mouse.yp < this.y && this.y < c.height - this.r * 10) {\n            this.y += 10\n          }\n          if (mouse.xp > this.x && this.x > this.r * 10) {\n            this.x -= 10\n          }\n          if (mouse.yp > this.y && this.y > this.r * 10) {\n            this.y -= 10\n          }\n        }\n        this.x += this.xv * td;\n        this.y += this.yv * td;\n        this.color = \"hsl(\" +clr+ \",100%,50%)\"\n      }\n      Setup.prototype.draw = function(){\n        ctx.beginPath();\n        ctx.fillStyle = this.color\n        ctx.arc(this.x, this.y, this.r, 0, 2*Math.PI)\n        ctx.fill()\n      }\n      const rn = (max,min) => Math.random()*(max-min)+min;\n      const mouse = {\n        xp: NaN,\n        yp: NaN,\n        radius: 90\n      }\n      c.addEventListener(\"touchstart\",  e => {\n        mouse.xp = e.touches[0].clientX\n        mouse.yp = e.touches[0].clientY\n      })\n      c.addEventListener(\"touchmove\", e => {\n        mouse.xp = e.touches[0].clientX\n        mouse.yp = e.touches[0].clientY\n      })\n      c.addEventListener(\"touchend\", () => {\n        mouse.xp = NaN\n        mouse.yp = NaN\n      })\n      let obj = []\n      const fillar = () => {\n        for (let i = 0; i < 65; i++) {\n        clr++\n          obj.push(new Setup(clr))\n        }\n      }\nlet now = performance.now()/1000;\nlet dt = now - then;\nthen = now;\n      const animate = () => {\n        ctx.globalAlfa = 0.1\n        ctx.fillStyle = \"black\"\n        ctx.fillRect(0, 0, c.width, c.height)\n        ctx.fill()\n        clr+=2\n        window.requestAnimationFrame(animate)\n        for (let ii = 0; ii < obj.length; ii++) {\n          obj[ii].draw()\n          obj[ii].update(dt)\n          for (let k = ii; k < obj.length; k++) {\n            let dx = obj[k].x-obj[ii].x\n            let dy = obj[k].y-obj[ii].y\n            let ds = Math.sqrt(dx*dx+dy*dy)\n            if (ds > (c.width/14)+(c.height/14)) {\n              ctx.beginPath()\n              ctx.strokeStyle = \"hsla(\" +clr1+ \",100%,50%,0)\"\n              ctx.moveTo(obj[k].x, obj[k].y)\n              ctx.lineTo(obj[ii].x, obj[ii].y)\n              ctx.stroke()\n            } else {\n              ctx.beginPath()\n              ctx.strokeStyle = \"hsla(\" +clr+ \",100%,50%,0.8)\"\n              ctx.moveTo(obj[k].x, obj[k].y)\n              ctx.lineTo(obj[ii].x, obj[ii].y)\n              ctx.stroke()\n            }\n          }\n        }\n      }\n      animate()\n      fillar()\n    }",
    "backendcode": "from django.shortcuts import render\n\n\n# Create your views here.\ndef cross(request,name):\n    #Write your code here dont change function name, and try except block happy coding\n\n\n    msg = \"hI LOVE TO CODE THIS\"\n    my_dic = {'msg' :msg}\n    path = '{}/cross.html'.format(name)\n    return render(request,path,context=my_dic)"
  }
}